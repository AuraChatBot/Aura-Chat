name: CI / CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

env:
  NODE_VERSION: '18'
  HARDHAT_NETWORK: hardhat
  DOCKER_IMAGE_REGISTRY: docker.io
  DOCKER_IMAGE_NAMESPACE: ${{ secrets.DOCKERHUB_USERNAME }}  # your Docker Hub username

jobs:

  # 1) Lint & Test
  lint-test:
    name: üîç Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint

      - name: Run Jest Tests
        run: yarn test --ci

  # 2) Solidity Security Scan
 
  # 4) (Optional) Deploy on main
  # deploy:
  #   name: üöÄ Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  # 
  #     # Insert your deployment steps here, for example:
  #     # - name: Configure AWS credentials
  #     #   uses: aws-actions/configure-aws-credentials@v2
  #     #   with:
  #     #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     #
  #     # - name: Terraform Apply
  #     #   working-directory: infra
  #     #   run: terraform init && terraform apply -auto-approve
  #     #
  #     # - name: Helm Deploy
  #     #   run: |
  #     #     helm upgrade --install aura-backend k8s/charts/backend \
  #     #       --namespace aura-prod --values k8s/values-prod.yaml \
  #     #       --set image.tag=${{ github.sha }}
  #     #     helm upgrade --install aura-frontend k8s/charts/frontend \
  #     #       --namespace aura-prod --values k8s/values-prod.yaml \
  #     #       --set image.tag=${{ github.sha }}
  #     #
  #     - name: Smoke Test
  #       run: curl -f https://app.aurabot.xyz/health || (echo "Health check failed" && exit 1) 