name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Clean install dependencies
        run: |
          yarn cache clean
          yarn install --frozen-lockfile --verbose
          cd src && yarn install --frozen-lockfile
          cd ../web && yarn install --frozen-lockfile
          cd ../contracts && yarn install --frozen-lockfile
          cd ..
      
      - name: Run ESLint
        run: |
          echo "Running ESLint on web..."
          yarn workspace @pheme-protocol/web lint
          echo "Running ESLint on backend..."
          yarn workspace @pheme-protocol/backend lint
          echo "Compiling contracts..."
          yarn workspace @pheme-protocol/contracts compile
      
      - name: Run Tests
        run: |
          echo "Running web tests..."
          yarn workspace @pheme-protocol/web test:ci
          echo "Running backend tests..."
          yarn workspace @pheme-protocol/backend test:ci
          echo "Running contract tests..."
          yarn workspace @pheme-protocol/contracts test

  solidity-scan:
    name: Solidity Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: |
          yarn cache clean
          yarn install --frozen-lockfile --verbose
      
      - name: Compile contracts
        run: |
          cd contracts
          yarn hardhat compile
      
      - name: Run Slither
        uses: crytic/slither-action@v0.2.0
        with:
          target: 'contracts'

  build-compile:
    name: Build & Compile
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: |
          yarn cache clean
          yarn install --frozen-lockfile --verbose
      
      - name: Compile contracts
        run: |
          cd contracts
          yarn hardhat compile
      
      - name: Build backend
        run: |
          cd src
          yarn build
      
      - name: Build frontend
        run: |
          cd web
          yarn build

  docker-build-push:
    name: Docker Build & Push
    needs: [lint-test, solidity-scan, build-compile]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}
      
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./src
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./web
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: docker-build-push
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deployment would happen here"
          echo "For now, we're just building and pushing Docker images"
          echo "You can add your preferred deployment method later" 