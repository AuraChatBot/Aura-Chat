name: CI / CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: '20'
  DOCKER_IMAGE_REGISTRY: docker.io
  DOCKER_IMAGE_NAMESPACE: ${{ secrets.DOCKER_USERNAME }}

jobs:

  install-deps:
    name: "‚¨áÔ∏è Install & Cache Deps"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Upload workspace
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: .

  lint-test:
    name: "üîç Lint & Test"
    runs-on: ubuntu-latest
    needs: install-deps
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Run ESLint
        run: yarn lint
      - name: Run tests with coverage
        run: yarn test --coverage --ci
      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  security:
    name: "üîí Security Scan"
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Pheme Protocol'
          path: '.'
          format: 'HTML'
          out: 'reports'
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports

  solidity-scan:
    name: "üõ°Ô∏è Solidity Security Scan"
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      - name: List files in /contracts
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/contracts
          run: |
            ls -l /contracts || echo "/contracts does not exist"
      - name: Run Slither
        uses: addnab/docker-run-action@v3
        with:
          image: trailofbits/slither:latest
          options: -v ${{ github.workspace }}:/contracts
          run: slither /contracts

  build:
    name: "üèóÔ∏è Build & Compile"
    runs-on: ubuntu-latest
    needs: [lint-test, solidity-scan]
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Compile Contracts
        working-directory: contracts
        run: yarn compile
      - name: Build Backend (src)
        working-directory: src
        run: yarn build
      - name: Build Frontend (web)
        working-directory: web
        run: yarn build
      - name: Build Bots
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
        run: |
          if [ ! -d "bots" ]; then
            echo "::error::Bots directory not found"
            exit 1
          fi
          cd bots
          echo "Running security audit..."
          yarn audit
          echo "Building bots..."
          yarn build
        env:
          NODE_ENV: production
          BOT_SECURITY_LEVEL: high
          RATE_LIMIT_ENABLED: true

  docker:
    name: "üê≥ Docker Build & Push"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.app
          build-args: |
            SERVICE=src
            PORT=3001
          push: true
          tags: $DOCKER_IMAGE_REGISTRY/$DOCKER_IMAGE_NAMESPACE/pheme-backend:${GITHUB_SHA::8}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.app
          build-args: |
            SERVICE=web
            PORT=3000
          push: true
          tags: $DOCKER_IMAGE_REGISTRY/$DOCKER_IMAGE_NAMESPACE/pheme-frontend:${GITHUB_SHA::8}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build & Push Bots Image
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.app
          build-args: |
            SERVICE=bots
            PORT=3002
          push: true
          tags: $DOCKER_IMAGE_REGISTRY/$DOCKER_IMAGE_NAMESPACE/pheme-bots:${GITHUB_SHA::8}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: "üöÄ Deploy to Staging / Prod"
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://staging.app.phemebot.xyz
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      - name: Configure AWS Credentials
        id: aws-auth
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/github-actions-role
          aws-region: us-east-1
          mask-aws-account-id: true
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      - name: Terraform Init & Apply (Staging)
        working-directory: infra
        run: |
          terraform init
          terraform apply -var-file=terraform.tfvars.staging -auto-approve
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      - name: Deploy Backend via Helm
        run: |
          helm upgrade --install pheme-backend k8s/charts/backend \
            --namespace pheme-staging \
            --values k8s/values-staging.yaml \
            --set image.tag=${GITHUB_SHA::8}
      - name: Deploy Frontend via Helm
        run: |
          helm upgrade --install pheme-frontend k8s/charts/frontend \
            --namespace pheme-staging \
            --values k8s/values-staging.yaml \
            --set image.tag=${GITHUB_SHA::8}
      - name: Deploy Bots via Helm
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
        run: |
          if [ -d "bots" ]; then
            helm upgrade --install pheme-bots k8s/charts/bots \
              --namespace pheme-staging \
              --values k8s/values-staging.yaml \
              --set image.tag=${GITHUB_SHA::8}
          fi
      - name: Verify Deployment
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=pheme-backend -n pheme-staging --timeout=300s
          kubectl wait --for=condition=ready pod -l app=pheme-frontend -n pheme-staging --timeout=300s
          
          # Run smoke tests
          yarn test:smoke

  performance:
    name: "‚ö° Performance Test"
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './lighthouse.config.js'
      - name: Run k6 Performance Tests
        uses: grafana/k6-action@v0.3.0
        with:
          filename: tests/performance/load-test.js
          flags: --out json=results.json
      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: results.json 