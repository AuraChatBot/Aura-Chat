name: CI / CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: docker.io
  DOCKER_NAMESPACE: ${{ secrets.DOCKER_USERNAME }}

jobs:

  # 1) Lint & Test
  lint-test:
    name: "üîç Lint & Test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint

      - name: Run Jest tests
        run: yarn test --ci

  # 2) Solidity Security Scan
  solidity-scan:
    name: "üõ°Ô∏è Solidity Security Scan"
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v3

      - name: List contract files
        run: |
          ls -l .
          ls -l contracts || echo "No contracts directory"

      - name: Run Slither
        uses: addnab/docker-run-action@v3
        with:
          image: trailofbits/slither:latest
          options: -v ${{ github.workspace }}:/src
          run: slither /src/contracts

  # 3) Build & Compile
  build:
    name: "üèóÔ∏è Build & Compile"
    runs-on: ubuntu-latest
    needs: [lint-test, solidity-scan]
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Compile Contracts
        working-directory: contracts
        run: yarn compile

      - name: Build Backend
        working-directory: src
        run: yarn build

      - name: Build Frontend
        working-directory: web
        run: yarn build

      - name: Security Audit & Build Bots
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
        env:
          NODE_ENV: production
          BOT_SECURITY_LEVEL: high
          RATE_LIMIT_ENABLED: true
        run: |
          if [ ! -d bots ]; then
            echo "::error::Bots directory not found"
            exit 1
          fi
          cd bots
          yarn install --frozen-lockfile
          yarn audit --level high
          yarn build

  # 4) Docker Build & Push
  docker:
    name: "üê≥ Build & Push Docker Images"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to registry
        if: ${{ secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Backend Image
        if: ${{ secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD }}
        uses: docker/build-push-action@v5
        with:
          context: src
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/pheme-backend:${{ github.sha }}

      - name: Build & Push Frontend Image
        if: ${{ secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD }}
        uses: docker/build-push-action@v5
        with:
          context: web
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/pheme-frontend:${{ github.sha }}

      - name: Build & Push Bots Image
        if: ${{ (github.event_name == 'push' || github.event_name == 'pull_request') && secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD }}
        uses: docker/build-push-action@v5
        with:
          context: bots
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/pheme-bots:${{ github.sha }}

#  # 5) Deploy to Staging
#  deploy:
#    name: "üöÄ Deploy to Staging"
#    runs-on: ubuntu-latest
#    needs: docker
#    if: github.ref == 'refs/heads/main'
#    environment:
#      name: staging
#      url: https://staging.app.phemebot.xyz
#    permissions:
#      id-token: write
#      contents: read
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Configure AWS Credentials
#        id: aws-auth
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          role-to-assume: arn:aws:iam::123456789012:role/github-actions-role
#          aws-region: us-east-1
#          mask-aws-account-id: true
#
#      - name: Verify AWS Authentication
#        if: steps.aws-auth.outcome == 'success'
#        run: aws sts get-caller-identity
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_version: 1.5.0
#
#      - name: Terraform Init & Apply
#        working-directory: infra
#        run: |
#          terraform init -backend-config=terraform.tfvars.staging
#          terraform apply -var-file=terraform.tfvars.staging -auto-approve
#
#      - name: Setup kubectl
#        uses: azure/setup-kubectl@v3
#        with:
#          version: 'latest'
#
#      - name: Setup Helm
#        uses: azure/setup-helm@v1
#        with:
#          version: '3.10.0'
#
#      - name: Deploy Backend via Helm
#        run: |
#          helm upgrade --install pheme-backend k8s/charts/backend \
#            --namespace pheme-staging \
#            --values k8s/values-staging.yaml \
#            --set image.tag=${{ github.sha }}
#
#      - name: Deploy Frontend via Helm
#        run: |
#          helm upgrade --install pheme-frontend k8s/charts/frontend \
#            --namespace pheme-staging \
#            --values k8s/values-staging.yaml \
#            --set image.tag=${{ github.sha }}
#
#      - name: Deploy Bots via Helm
#        run: |
#          if [ -d bots ]; then
#            helm upgrade --install pheme-bots k8s/charts/bots \
#              --namespace pheme-staging \
#              --values k8s/values-staging.yaml \
#              --set image.tag=${{ github.sha }} \
#              --set security.rateLimit.enabled=true \
#              --set security.auditLogging.enabled=true \
#              --set security.accessControl.enabled=true
#          fi
#
#      - name: Smoke Test
#        run: |
#          curl -f https://staging.app.phemebot.xyz/health
