/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PhemeVerification {
  export type VerificationStruct = {
    verifier: AddressLike;
    data: BytesLike;
    blockNumber: BigNumberish;
  };

  export type VerificationStructOutput = [
    verifier: string,
    data: string,
    blockNumber: bigint
  ] & { verifier: string; data: string; blockNumber: bigint };
}

export interface PhemeVerificationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_SKILL_ID_LENGTH"
      | "addVerifier"
      | "getVerification"
      | "isVerifier"
      | "owner"
      | "removeVerifier"
      | "renounceOwnership"
      | "transferOwnership"
      | "verifications"
      | "verifySkill"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "VerificationCreated"
      | "VerifierAdded"
      | "VerifierRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_SKILL_ID_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerification",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifications",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySkill",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_SKILL_ID_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySkill",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    skillId: BigNumberish,
    verificationData: BytesLike,
    blockNumber: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    skillId: bigint,
    verificationData: string,
    blockNumber: bigint
  ];
  export interface OutputObject {
    user: string;
    skillId: bigint;
    verificationData: string;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierAddedEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierRemovedEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PhemeVerification extends BaseContract {
  connect(runner?: ContractRunner | null): PhemeVerification;
  waitForDeployment(): Promise<this>;

  interface: PhemeVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_SKILL_ID_LENGTH: TypedContractMethod<[], [bigint], "view">;

  addVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  getVerification: TypedContractMethod<
    [user: AddressLike, skillId: BigNumberish],
    [PhemeVerification.VerificationStructOutput],
    "view"
  >;

  isVerifier: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifications: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        verifier: string;
        data: string;
        blockNumber: bigint;
      }
    ],
    "view"
  >;

  verifySkill: TypedContractMethod<
    [user: AddressLike, skillId: BigNumberish, verificationData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_SKILL_ID_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getVerification"
  ): TypedContractMethod<
    [user: AddressLike, skillId: BigNumberish],
    [PhemeVerification.VerificationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVerifier"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifications"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        verifier: string;
        data: string;
        blockNumber: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifySkill"
  ): TypedContractMethod<
    [user: AddressLike, skillId: BigNumberish, verificationData: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VerificationCreated"
  ): TypedContractEvent<
    VerificationCreatedEvent.InputTuple,
    VerificationCreatedEvent.OutputTuple,
    VerificationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierAdded"
  ): TypedContractEvent<
    VerifierAddedEvent.InputTuple,
    VerifierAddedEvent.OutputTuple,
    VerifierAddedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierRemoved"
  ): TypedContractEvent<
    VerifierRemovedEvent.InputTuple,
    VerifierRemovedEvent.OutputTuple,
    VerifierRemovedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VerificationCreated(address,uint256,bytes,uint256)": TypedContractEvent<
      VerificationCreatedEvent.InputTuple,
      VerificationCreatedEvent.OutputTuple,
      VerificationCreatedEvent.OutputObject
    >;
    VerificationCreated: TypedContractEvent<
      VerificationCreatedEvent.InputTuple,
      VerificationCreatedEvent.OutputTuple,
      VerificationCreatedEvent.OutputObject
    >;

    "VerifierAdded(address)": TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;
    VerifierAdded: TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;

    "VerifierRemoved(address)": TypedContractEvent<
      VerifierRemovedEvent.InputTuple,
      VerifierRemovedEvent.OutputTuple,
      VerifierRemovedEvent.OutputObject
    >;
    VerifierRemoved: TypedContractEvent<
      VerifierRemovedEvent.InputTuple,
      VerifierRemovedEvent.OutputTuple,
      VerifierRemovedEvent.OutputObject
    >;
  };
}
